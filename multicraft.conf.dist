## This is the main configuration file for the Multicraft daemon. Any change to
## this file requires a restart of the daemon or a reload through the panel
## under Settings->Operations. Not all settings can be reloaded while the
## daemon is running.
## Lines with a '#' in front of them are disabled and will not have any effect.
## Remove the '#' to enable the setting.
[multicraft]
## The daemon will run under this user (not used for Windows)
user = minecraft:minecraft
## Directories created by Multicraft will have the owner set to
## the user and the group set to the webUser (not used for Windows)
## default: same as "user"
webUser = www-data:www-data

## The daemon will listen on the following IP/port.
## 0.0.0.0 to listen on all available interfaces (all IPs). Note that
## you will have to use the "externalIp" setting below if you set this
## to 0.0.0.0 as the control panel needs to know where to connect.
ip = 127.0.0.1
port = 25465

## If the external address is different from the listen address
## you can set the external address here. This setting will be saved
## to the DB and used by the control panel to connect to the daemon.
## default: same as "ip"
#externalIp =

## The connection password for daemon communication
## !! Change this when you set Multicraft to listen on a public IP !!
## The same password will have to be used on the panel side in the file:
## protected/config/config.php
#password = none

## Remote IP restrictions for daemon connections. This is a comma separated
## list of IPs that are allowed to connect to this daemon. Empty for all
## remote IPs allowed.
## default: empty
#allowedIps = 127.0.0.1

## The maximum number of daemon connections to allow to this daemon.
## default: 500
#maxConnections = 500

## The maximum number of daemon connections a single client can open.
## default: 50
#maxClientConnections = 50


## The daemon ID, only the Dynamic license supports this setting.
## Running multiple servers with the same IDs can cause unpredictable behavior
## Valid values: 1, 2, ..., 65535
#id = 1

## The database containing daemon 
## default: sqlite:data.db (-> "baseDir"/"dataDir"/data.db)
#database = sqlite:data.db
## Example for MySQL connections:
#database = mysql:host=127.0.0.1;dbname=multicraft_daemon
#dbUser = youruser
#dbPassword = yourpassword
#dbCharset = utf8

## A name for this daemon, this is optional
## default: Multicraft Daemon
#name =

## The daemon group this daemon belongs to. Currently only used to determine
## which .jar.conf files are available.
## default: empty
#group =

## The amount of memory available to this daemon in MB. This setting mainly
## serves informational purpose for display in the control panel and
## for the API to decide if this daemon can still run more servers.
## 0 means undefined
## default: 0
#totalMemory =

## The base directory of the multicraft install. Relative to the users
## home directory or absolute. Must exist.
## default: multicraft (-> /home/"user"/multicraft)
baseDir = multicraft
## The directory the daemon binaries reside in
## default: bin (-> "baseDir"/bin)
daemonDir = bin
## The data directory. Contains the database, socket, log and
## must be accessible by the control panel user if using a SQLite DB
## default: data (-> "baseDir"/data)
dataDir = data
## The directory jar files can be placed in
## default: jar (-> "baseDir"/jar)
jarDir = jar
## The directory containing all the servers. Users can be given access
## to specific subdirectories containing their server data
## default: servers (-> "baseDir"/servers)
serversDir = servers
## The directory containing server templates
## default: templates (-> "baseDir"/templates)
templatesDir = templates
## The following files contain daemon specific data.
## The paths specified are relative to "baseDir"
pidFile = multicraft.pid
logFile = multicraft.log
licenseFile = multicraft.key
scriptsFile = scripts.conf
## This file defines the config file to use depending on the executable name
configsFile = server_configs.conf
## This config file contains the default server configuration. It is not
## in the "jar" directory so it does not get listed as a selection in the
## JAR File dropdown.
defaultConfigFile = default_server.conf

## Note that for all of the above settings where a file or directory is
## indicated you can also use absolute paths (/dir), home-relative
## paths (~/dir) or relative paths (./dir or ../dir). "dir" stands for
## the setting you're editing.
## When not using absolute/relative paths the setting is taken to be
## relative to the home directory of the user configured by the "user"
## setting.
## Examples:
## - Changing "baseDir" to ./multicraft will cause multicraft to search
##   all the files in a subdirectory "multicraft" of the directory it's
##   called from
## - Changing "logFile" to ~/multicraft.log will cause Multicraft to log
##   everything to the file multicraft.log in the home directory of the
##   user configured by the "user" setting

## The maximum size of one logfile after which the log will be rotated
## default: 20971520 (20 MB)
logSize = 20971520

## The number of log files to keep (multicraft.log.1 ... multicraft.log.X)
## default: 9
logCount = 9

## Synchronize log writes. Disabling this will improve performance at the
## risk of having some log entries overlap.
## default: true
#logSync = false

## Use thesyslog facility instead of logging to a file.
## default: false
#logSyslog = true

## The syslog facility to log to. Possible values: auth, cron, daemon,
## kern, lpr, mail, news, security, syslog, user, uucp, local10-17
## default: daemon
#logFacility = daemon

## Log all commands the daemon receives from the panel
## default: false
#logCommands = false

## Log server console output to the log file under these conditions:
## - always     Always log server console output
## - startup    Only log server console output during server startup
## - running    Only log server console output after server startup
## - never      Never log server console output
## default: startup
#logServerConsole = startup

## Delay between server auto-starts in milliseconds.
## default: 750
autostartDelay = 750

## Automatically update server binaries, conf files or both on daemon
## startup. Valid values:
## - empty      Don't update anything on startup
## - base       Update the server binaries and conf files for the base server
##              types that come with Multicraft. Currently:
##                  minecraft_server.jar.conf, minecraft_optimized.jar.conf,
##                  craftbukkit.jar.conf, spigot.jar.conf
## - initial    Same as "base" but only update if the jar files don't exist
## - binary     Update all server binaries on daemon startup
## - conf       Update all server conf files on daemon startup
## - both       Update all server binaries and conf files on daemon startup
## default: empty
startupServerUpdate = initial

## A list of section names in .conf files that can safely be defined
## or overridden by users. Note that this is just a default value that
## can itself be overridden in the .conf files in the daemon directory.
## Use * to allow all sections or a regular expression matching allowed
## sections only.
## default: ^(encoding|commands|parse_.+)$
#safeConfSections = ^(encoding|commands|parse_.+)$

## Allow symlinks where directories are expected. This check is done for
## security.
## default: false
#allowSymlinks = false

## Skip the integrity check for directories. This check is done for
## security, it verifies that a directory entry is consistent with its
## filesystem entry. You can disable this if this check causes issues
## on your particular filesystem.
## default: true
#skipIntegrityCheck = false

## The timeout for template setup operations in seconds
## default: 600
#templateSetupTimeout = 600

## Disables the template functionality. Please use the setting in the panel to
## disable it there.
## default: false
#templatesDisabled = false

## Advanced: Use TCP keepalive for daemon connections
## default: true
#tcpKeepAlive = true
## Advanced: Use TCP keepalive for FTP connections
## default: true
#ftpTcpKeepAlive = true
## TCP keepalive parameters, use 0 for system default
## default: 0
tcpKeepAliveIdle = 60
tcpKeepAliveInterval = 5
tcpKeepAliveCount = 6
## Advanced: Set global timeout for TCP connections in seconds, 0 for no
## timeout
## default: 120
tcpTimeout = 120

## Advanced: Prefer IPv4 for version check requests.
## Can speed up hostname lookup.
## default: true
#preferIPv4 = true

## Whether to delete the server directory on the old daemon after a server
## move. This is disabled by default for safety.
## default: false
#deleteAfterMove = false

## Only allow a single script to be run at a time for each server. If disabled
## there is no limit on the number of scripts that can be running at the same
## time.
## default: false
singleScriptPerServer = true

## The timeout for server executable and config file downloads in seconds.
## default: 15
#downloadTimeout = 15
## The User-Agent string to use for server executable and config file downloads
#downloadUserAgent = Your Custom User-Agent
## The User-Agent string to use for plugin downloads
#downloadUserAgentPlugins = Your Custom User-Agent
## Whether or not to add version/architecture/OS parameters when downloading
## config files
## default: true
#downloadAddVersionInfo = true

## When enabled the remote host will be verified when using HTTPS, otherwise
## the host and certificate checks are skipped.
## default: false
#secureDownloads = false

## The CA certificate bundle to use for verifying secure downloads. If set to
## "auto" the daemon will try a set of default paths.
## default: auto
#caBundle = /etc/ssl/certs/ca-certificates.crt

## Stop automatically restarting a crashed server if it exceeds a certain
## number of restarts within a set time period. For example: With
## crashRestartLimit=10 and crashRestartPeriod=300 a server will no longer
## automatically restart when it crashes if it already crashed 10 times within
## the last 5 minutes
##
## The number of crash related restarts after which to stop restarting a
## server. 0 to disable.
## default: 0
crashRestartLimit = 0
## The period in seconds during which to count crash related automatic server
## restarts. If this is set to 0 the server will stop restarting regardless of
## the time period the restart limit was hit in.
## default: 300
#crashRestartPeriod = 300

[useragent]
## The path to the Multicraft useragent. This program is used in
## multiuser mode to access user files.
## default: bin (-> "baseDir"/bin, same as daemonDir)
#userAgentDir = bin
## The executable of the Multicraft useragent. Note that a config
## file with the same name as this setting (plus .conf) will be
## generated next to this file.
## default: useragent (-> "baseDir"/"userAgentDir"/useragent)
#userAgentFile = useragent
## The minimum allowed user and group IDs for server users
## default: 100
#userAgentMinUid = 100
#userAgentMinGid = 100
## The script to run when a server is being prepared. The path is
## relative to the userAgentDir.
## NOTE: This script will be run as the superuser.
## default: empty
#userAgentSuperuserPrepare = 
## The script to run when a server is being prepared. The path is
## relative to the baseDir.
## default: empty
#userAgentPrepare = 
## Various useragent configuration options
#userAgentCp = /bin/cp
#userAgentCpOpts = --preserve=mode,timestamps --
#userAgentDirCpOpts = -r --preserve=mode,timestamps --
#userAgentUnzip = /usr/bin/unzip
#userAgentUnzipOpts = -qql
#userAgentUnzipRe = ^(?:\s+[^\s]+){3}\s+(.*)$


[launcher]
## The path to the Multicraft launcher. This launcher program enables
## Multicraft to run servers that need a console to run correctly.
## default: launcher (-> "baseDir"/launcher)
#launcherDir = launcher
## The executable of the Multicraft launcher
## default: launcher (-> "baseDir"/"launcherDir"/launcher)
#launcherFile = launcher

## Integrated FTP server settings
[ftp]
## Wheter or not to enable the integrated FTP server, true/false
## default: true
enabled = true
## IP to listen on for FTP connections, uncomment to use the same as
## for the daemon.
## 0.0.0.0 means listening on all available interfaces (all IPs)
## default: same as the "ip" setting for the daemon, see above
#ftpIp = 0.0.0.0
## See the descriptions of "externalIp" and "ip" for the daemon above
## default: same as "externalIp" if "ftpIp" is "0.0.0.0" otherwise "ftpIp"
#ftpExternalIp = 
## Masquerade IP address to use for passive FTP connections when
## Multicraft is running behind a router.
## default: empty
#ftpNatIp = 
## A port range to use for passive data transfers. If this is not
## specified the FTP server will use random ports.
## Format: 4000-8000
## default: empty
#ftpPasvPorts = 
## Port to listen on for incoming FTP connections. Change this to
## something else if you are already running an FTP server on this
## system.
## default: 21
ftpPort = 21
## Regular expression matching files that can't be manipulated by
## users in any way. If you want users to be able to upload their own
## plugins instead of using the ones you provide for them you can
## just comment this option out.
## default: empty
forbiddenFiles = \.(jar|exe|bat|pif|sh)$
## Set the level of detail for FTP server log messages in the multicraft.log.
## Errors will always be logged regardless of this setting.
## Available levels:
## - full       Log all messages
## - basic      Don't log client/server communication
## - none       No FTP logging
## default: full
ftpLogLevel = full
## If this setting is enabled the FTP server will not be started when the main
## daemon process is started. You can start the FTP server separately by using
## "start_ftp" instead of "start" as the parameter to the daemon command.
## default: false
ftpSeparate = false
## The PID file for the FTP only process. The path is relative to "baseDir"
## default: multicraft_ftp.pid
ftpPidFile = multicraft_ftp.pid
## The log file to use for the FTP only process. This setting has no effect if
## the FTP server is started as part of the main daemon process (i.e. if
## "ftpSeparate" is false.
## default: multicraft.log (same as the daemon)
ftpLogFile = multicraft.log
## Throttle the FTP bandwidth (experimental)
## Incoming data throttle (Kb/s)
## default: 0 (unlimited) 
#ftpThrottleIn = 0
## Outgoing data throttle (Kb/s)
## default: 0 (unlimited) 
#ftpThrottleOut = 0

## Starts an FTPS server when enabled
## default: false
#ftps = false

## The certificate file to use for the FTPS server. This is required when the
## "ftps" setting is enabled. You can generate your own self signed certificate
## as described here:
##   https://httpd.apache.org/docs/2.4/ssl/ssl_faq.html#selfcert
## It's not recommended to use the default certificate for live deployments.
## default: ssl/ftps.pem
#ftpsCertfile =  ssl/ftps.pem
## The key file to use for the FTPS server. This can be left empty if the key
## is already contained in the certificate file.
## default:  empty
#ftpsKeyfile = 
## Enable this to force users to use FTPS
## default: false
#ftpsForce = false
## This will allow some older protocols considered insecure to be used by the
## FTPS server to improve compatibility with older clients.
## default: false
#ftpsCompatMode = false

## Minecraft default settings
[minecraft]
## The default amount of reserved memory
## default: 1024
memory = 1024
## The name of the java executable
## default: /usr/bin/java
java = /usr/bin/java
## The jar file to use. This file will be looked for in the "base"
## directory as configured above
## default: minecraft_server.jar
jar = minecraft_server.jar

## Backup settings
[backup]
## The command to run a backup. The following variables can be used:
## - {WORLD} The name of the world being backed up
## - {SERVER_DIR} The directory of the server (working directory)
## - {MULTICRAFT_DIR} The Multicraft base directory ("baseDir" above)
## - {BASE_DIR} The directory containing all the servers ("serversDir above")
## Note that the resulting files is expected to be named "{WORLD}-tmp.zip"
command = /usr/bin/zip -qr "{WORLD}-tmp.zip" . -i "{WORLD}"*/*
## The same setting for Windows systems
commandWin = "{MULTICRAFT_DIR}\bin\zip.exe" -qr "{WORLD}-tmp.zip" "{WORLD}"*/
## Uncomment the following commands to backup the entire server directory
## instead of just the current world
## command = /usr/bin/zip -qr "{WORLD}-tmp.zip" . --exclude {WORLD}*.zip
## commandWin = "{MULTICRAFT_DIR}\bin\zip.exe" -qr "{WORLD}-tmp.zip" . --exclude {WORLD}*.zip

## System settings
[system]
## Most of the settings below are for Linux only

## Whether or not to use one system user per Minecraft server.
## This is recommended if you let your users upload untrusted executables.
## Note that for every server a new system user is automatically created
## if this option is enabled (user name format and commands configured below).
## default: false
#multiuser = true

## Display the output of this command in the panel under
## "Settings"->"Multicraft Status"
## default: empty
#infoCmd = uptime
#infoCmdWin =

## The name format for new users, the following variables can be used:
## - {ID} The server ID
## default: mc{ID}
userFormat = mc{ID}
## The name format for new groups, the following variables can be used:
## - {ID} The server ID
## - {USER} The full username
## default: same as userFormat
#groupFormat = {USER}

## The commands to create and delete system users and groups
## The following variables can be used:
## - {USER} The full username
## - {GROUP} The full groupname
## - {ID} The server ID
## - {DIR} The server base directory, used as the users home
## These commands cannot contain escaped quotes or empty arguments
addUser = /usr/sbin/useradd -c "Multicraft Server {ID}" -d "{DIR}" -g "{GROUP}" -s /bin/false "{USER}"
addGroup = /usr/sbin/groupadd "{GROUP}"
delUser = /usr/sbin/userdel "{USER}"
delGroup = /usr/sbin/groupdel "{GROUP}"

## Enable or disable Linux quota support
## default: false
#enableQuota = false

## The command to set the Linux user quota
## The following variables can be used:
## - Variables from "addUser" comment
## - {QUOTA} The disk space quota in MB
## - {QUOTA_BLOCKS} The disk space quota in blocks
#setUserQuota = /usr/sbin/setquota -u "{USER}" 0 "{QUOTA_BLOCKS}" 0 0 -a

## The script used to fetch quota usage information for the current user
## (in blocks)
## default: scripts/getquota.sh
#quotaCheckScript = scripts/getquota.sh

## The minimum time in seconds between two quota usage checks
## default: 20
#quotaCheckDelay = 20

## The kernel block size to use for quota calculation
## default: 1024
#quotaBlockSize = 1024

## Regular expression for filtering file names. Any match gets replaced by "_".
## Warning: Changing this is potentially dangerous
## default: [\\/<>:|*?"'&;$~%\0]
#fileFilter = [\\/<>:|*?"'&;$~%\0]

## The command to unpack a zip file. The following variables can be used:
## - {FILE} The name of the zip archive to restore
## - {MULTICRAFT_DIR} The daemon base directory
unpackCmd = /usr/bin/unzip -quo "{FILE}"
## The same setting for Windows systems
unpackCmdWin = "{MULTICRAFT_DIR}\bin\unzip.exe" -quo "{FILE}"

## The command to pack a zip file. The following variables can be used:
## - {FILE} The name of the zip archive to create
## - {MULTICRAFT_DIR} The daemon base directory
packCmd = /usr/bin/zip -qr "{FILE}" .
## The same setting for Windows systems
packCmdWin = "{MULTICRAFT_DIR}\bin\zip.exe" -qr "{FILE}" .

## Settings for Docker support (EXPERIMENTAL)
[docker]
## Enable Docker support
## default: false
enabled = false

## The name of the user that the container process should belong to. It's
## recommended to create a new user that is used just for this, for example:
## # adduser --disabled-login --no-create-home --ingroup users docker
## default: docker
#user = docker

## The name of the "docker" group. This group needs to have access to the
## docker daemon.
## default: docker
#group = docker

## The full path to the "docker" executable
## default: /usr/bin/docker
#docker = /usr/bin/docker

## The name of the Docker image to use
## default: java:jre
#image = java:jre

## Memory in MB to add to server memory value for Docker containers
## default: 128
#memoryAdd = 128

## CPU factor for each Docker container. Multiplies default CPU shares by this
## value.
## default: 1.0
#cpuFactor = 1.0

## If this is enabled the daemon will try to always show the external IP in the
## server console instead of the IP used in the container.
## default: true
#maskIp = true

## Format for volume definitions (see mounts below)
## default: --volume=%s:%s:%s
#volumeFormat = --volume=%s:%s:%s

## Format for environment variable definitions
## default: --env=%s=%s
#envFormat = --env=%s=%s

## Directories to mount inside the container. Uses the "volumeFormat" setting
## to mount the directories. Format:
## HOST_DIR[:[CONTAINER_DIR]:[MODE]]
## If CONTAINER_DIR is omitted it is set to the same value as HOST_DIR.
## MODE can be "rw" for writable or "ro" for read-only, defaults to "ro".
#mounts = "{TEMPLATES_DIR}" "{MULTICRAFT_DIR}/scripts" "{DAEMON_JAR_DIR}" "{SERVER_DIR}::rw" "/usr/lib/locale"

## Additional arguments to pass to Docker
## default: empty
#arguments =

## The command to start the Docker container.  See the [start] section of the
## default "craftbukkit.jar.conf" for a list of available variables.
## Additional variables:
## - {DOCKER_ARGS} The additional arguments from the "arguments" setting
## - {DOCKER_VOLUMES} The volume arguments generated from the "volumeFormat"
##   and "mounts" settings
## - {DOCKER_ENVS} The env arguments generated using the "envFormat" setting
## - {DOCKER_IMAGE} The docker image to use
## - {DOCKER_MEMORY} The memory limit in MB to use for this container. This is
##   calculated as the server memory limit plus the "memoryAdd" setting
## - {DOCKER_CPUSHARES} The CPU shares this container can use. This is
##   calculated using the "cpuFactor" setting (1024 * cpuFactor)
## - {DOCKER_IP} The actual IP setting of the server. When running in a Docker
##   container the {IP} variable is always 0.0.0.0
#command = run --rm -i -a stdin -a stdout -a stderr --read-only --tmpfs /tmp:exec --security-opt=no-new-privileges --cap-drop=ALL {DOCKER_ARGS} -p {DOCKER_IP}:{PORT}:{PORT} -w {WORKING_DIR} -u {UID}:{GID} -m {DOCKER_MEMORY}M --cpu-shares={DOCKER_CPUSHARES} --name=mc{SERVER_ID} {DOCKER_VOLUMES} {DOCKER_ENVS} {DOCKER_IMAGE}

## The command to stop a container when a server did not shut down on its own
## after a certain period of time
#stopCommand = stop mc{SERVER_ID}

## The command to kill a container when it does not close after sending the
## stop command
#killCommand = kill mc{SERVER_ID}

## The command to determine the PID of the root process of a container
#pidCommand = inspect -f "{{ .State.Pid }}" mc{SERVER_ID}

## Docker settings can be overridden by conf files of server executables in the
## [docker] section. This setting is a comma sepparated list of setting types
## that can be overridden. Valid values:
## - disable: Allows conf files to run without Docker ("enabled" setting)
## - image: Allows conf files to change the image name ("image" setting)
## - settings: Allows conf files to change general settings ("memoryAdd",
##   "cpuFactor", "maskIp" settings)
## - command: Allows conf files to affect the final docker run command
##   ("mounts", "arguments", "command", "stopCommand", "killCommand")
## default: image, settings
#override = image, settings

## Cleanup existing docker containers using the configured cleanup command
## before trying to run a server.
## default: false
#cleanup = false

## The command to cleanup an existing container before starting a server
#cleanupCommand = rm -f mc{SERVER_ID}
